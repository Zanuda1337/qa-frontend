import React, { useEffect, useRef, useState } from 'react';import { Editor } from '@tinymce/tinymce-react/lib/cjs/main/ts';import { Editor as EditorType, EditorEvent } from 'tinymce';import classes from './CustomEditor.module.scss';import FieldError from 'src/components/FieldError/FieldError';import { clsx } from 'clsx';import {imagesApi} from "src/api/imagesApi/imagesApi";const TINYMCE_API_KEY = '7sdnz2py0urrhgr1f021ynuoqoeiddnewua17w2d244jxej7';type TCustomEditorProps = {  value: string;  label: string;  forceH2?: boolean;  onInit?: () => void;  error?: boolean;  message?: string;  onChange: (content: string) => void;  onBlur?: (e: EditorEvent<{ focusedEditor: EditorType | null }>) => void;};const CustomEditor: React.FC<TCustomEditorProps> = ({  label,  value,  forceH2,  onInit,  onChange,  message,  error,  onBlur,}) => {  const editorRef = useRef<EditorType>(null);  const [initialized, setInitialized] = useState(false);  useEffect(() => {    if (!editorRef.current) return;    editorRef.current.setContent(value);    editorRef.current.undoManager.reset();  }, [initialized]);  return (    <FieldError message={message}>      <div        className={clsx(classes.wrapper, { [classes.error]: error })}        style={{ display: initialized ? 'flex' : 'none' }}      >        <p>{label}</p>        <Editor          apiKey={TINYMCE_API_KEY}          onInit={(evt, editor) => {            // @ts-ignore            editorRef.current = editor;            setInitialized(true);            onInit && setTimeout(onInit, 100);          }}          init={{            min_height: 100,            menubar: false,            autoresize_bottom_margin: 15,            images_upload_credentials: true,            automatic_uploads: true,            file_picker_types: 'image',            forced_root_block: forceH2 ? 'h2' : undefined,            block_formats:              'Paragraph=p; Header 1=h1; Header 2=h2; Header 3=h3; Header 4=h4; Header 5=h5; Header 6=h6;',            plugins:              'anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount autoresize',            toolbar: `undo redo | ${              forceH2 ? '' : 'blocks |'            } bold italic underline strikethrough | link image table | align | numlist bullist indent outdent | charmap | removeformat`,            file_picker_callback: async (cb) => {              const input = document.createElement('input');              input.type = 'file';              input.accept = 'image/*';              input.onchange = function () {                if(!('files' in this)) return                const files = this.files as File[]                const file = files[0];                if(!file) return;                const formData = new FormData();                formData.append("img", file);                imagesApi.upload(formData).then(({data}) => {                  cb(data.img)                })              };              input.click();            },          }}          onBlur={onBlur}          onEditorChange={() => {            if (!editorRef.current) return;            const newContent = editorRef.current.getContent();            onChange(newContent);          }}        />      </div>    </FieldError>  );};export default CustomEditor;