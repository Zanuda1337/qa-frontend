import React, { useMemo } from 'react';import { Breadcrumbs, Button, Menu, MenuItem } from '@mui/material';import { NavLink, useLocation, useNavigate, Location } from 'react-router-dom';import Logo from 'src/components/Logo/Logo';import { useAppSelector, useBoundActions } from 'src/app/hooks';import { authActions } from 'src/features/auth/Auth.slice';import { ROLE } from 'src/consts';import { getRoute } from 'src/router/Router.utils';import classes from './Header.module.scss';import { useScreen } from 'src/hooks';import SvgSelector from 'src/components/SvgSelector/SvgSelector';type THeaderProps = {};const getBreadCrumbs = (  location: Location<any>): { path: string; label: string }[] => {  let temp: string[] = [];  let paths: string[] = [];  location.pathname.split('/').forEach((locName, index) => {    temp.push(locName);    let path = '';    for (let i = 0; i < index + 1; i++) {      if (temp[i]) path += '/' + temp[i];    }    paths.push(path);  });  return paths.map((path) => getRoute(path)).filter((r) => r !== undefined) as {    path: string;    label: string;  }[];};const Header: React.FC<THeaderProps> = ({}) => {  const user = useAppSelector((state) => state.authReducer.user);  const boundActions = useBoundActions(authActions);  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);  const open = Boolean(anchorEl);  const navigate = useNavigate();  const location = useLocation();  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {    setAnchorEl(event.currentTarget);  };  const handleClose = () => {    setAnchorEl(null);  };  const handleNavigate = (path: string) => {    navigate(path);    handleClose();  };  const handleLogout = () => {    boundActions.logout();    handleNavigate('/auth/login');  };  const handleSettings = () => {    handleNavigate('/settings');  }  const breadcrumbs = useMemo(() => getBreadCrumbs(location), [location]);  const { width } = useScreen();  return (    <header>      {width >= 800 ? (        <Breadcrumbs          classes={{ separator: 'breadcrumbs__separator' }}          separator="›"        >          <NavLink to="/">            <Logo />          </NavLink>          {breadcrumbs.map((route, index) =>            index + 1 === breadcrumbs.length ? (              <p key={route.path} className={'breadcrumbs__text'}>                {route.label}              </p>            ) : (              <NavLink                key={route.path}                to={route.path}                className={'breadcrumbs__text'}              >                {route.label}              </NavLink>            )          )}        </Breadcrumbs>      ) : (        <NavLink          to={breadcrumbs.at(-2)?.path || '/'}          className={classes.arrowButton}        >          {!breadcrumbs.length ? (            <Logo />          ) : (            <SvgSelector id={'arrowLeft'} />          )}        </NavLink>      )}      <div>        <Button onClick={handleClick} className={classes.button}>          <p>{user?.email}</p>        </Button>        <Menu anchorEl={anchorEl} open={open} onClose={handleClose}>          {user?.role === ROLE.ADMIN && (            <MenuItem              className={classes.option}              onClick={() => handleNavigate('/admin/questions')}            >              Панель администратора            </MenuItem>          )}          <MenuItem className={classes.option} onClick={handleSettings}>            Настройки          </MenuItem>          <MenuItem className={classes.option} onClick={handleLogout}>            Выйти          </MenuItem>        </Menu>      </div>    </header>  );};export default Header;