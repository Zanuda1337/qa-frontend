import { createSlice, PayloadAction } from '@reduxjs/toolkit';import { AppThunk } from 'src/app/types';import { fetchMeAsync } from 'src/features/auth/Auth.slice';import {TStateStatus} from "src/types";interface AppState {  status: TStateStatus;  initialized: boolean;}const initialState: AppState = {  status: 'idle',	initialized: false,};const appSlice = createSlice({  name: 'appReducer',  initialState,  reducers: {    changeInitialized: (      state,      action: PayloadAction<'idle' | 'loading' | 'failed'>    ) => {      state.status = action.payload;    },	  setInitialized: (      state,    ) => {      state.initialized = true;    },  },});export const initialize = (): AppThunk => async (dispatch) => {  dispatch(appActions.changeInitialized('loading'));  try {    await dispatch(fetchMeAsync()).unwrap();    dispatch(appActions.changeInitialized('idle'));    dispatch(appActions.setInitialized());  } catch (e) {    dispatch(appActions.changeInitialized('failed'));    dispatch(appActions.setInitialized());  }};export const { actions: appActions, reducer: appReducer } = appSlice;