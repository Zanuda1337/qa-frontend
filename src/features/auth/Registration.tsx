import React from 'react';import classes from 'src/features/auth/Auth.module.scss';import CustomTextField from 'src/components/CustomTextField/CustomTextField';import { Button } from '@mui/material';import {Navigate, NavLink, useNavigate} from 'react-router-dom';import {Controller, SubmitHandler, useForm} from "react-hook-form";import {  hasAtChar,  hasCharsAfterAt,  hasDotChar, minLength,  required} from "src/utils/validators";import {useAppSelector, useBoundActions} from "src/app/hooks";import {useSnackbarListener} from "src/hooks";import {  fetchMeAsync,  fetchRegistrationAsync} from "src/features/auth/Auth.slice";const allActions = { fetchRegistrationAsync, fetchMeAsync };type TInitialValues = { email: string; password: string };const Registration: React.FC = () => {  const isLoggedIn = useAppSelector((state) => state.authReducer.isLoggedIn);  const status = useAppSelector((state) => state.authReducer.status);  const message = useAppSelector((state) => state.authReducer.message);  const boundActions = useBoundActions(allActions);  const { handleSubmit, control } = useForm<TInitialValues>({    mode: 'onBlur',    defaultValues: { email: '', password: '' },  });  const navigate = useNavigate();  const onSubmit: SubmitHandler<TInitialValues> = async (data) => {    try {      await boundActions.fetchRegistrationAsync(data).unwrap();      await boundActions.fetchMeAsync();      navigate('/');    } catch (e) {}  };  useSnackbarListener(message, status === 'failed' ? 'error' : 'info');  if (isLoggedIn) return <Navigate to="/" />;  return (    <div className={classes.auth}>      <div className={classes.container}>        <div className={classes['title-container']}>          <h2>Создать аккаунт</h2>          <h3>Введите данные</h3>        </div>        <Controller          control={control}          name="email"          rules={{            required,            validate: {              hasCharsAfterAt,              hasAtChar,              hasDotChar,            },          }}          render={({                     field: { value, onBlur, onChange },                     fieldState: { error },                   }) => (            <CustomTextField              label="Email"              type={'email'}              value={value}              error={!!error}              message={error?.message}              onBlur={onBlur}              onChange={onChange}            />          )}        />        <Controller          control={control}          name="password"          rules={{            required,            minLength,          }}          render={({                     field: { value, onBlur, onChange },                     fieldState: { error },                   }) => (            <CustomTextField              label="Пароль"              type={'password'}              value={value}              error={!!error}              message={error?.message}              onBlur={onBlur}              onChange={onChange}            />          )}        />        <Button variant="contained" className={classes.button} onClick={handleSubmit(onSubmit)}>          <p>Регистрация</p>        </Button>        <p className={classes.link}>          Уже есть аккаунт? <NavLink to={'/auth/login'}>Войти</NavLink>        </p>      </div>    </div>  );};export default Registration;