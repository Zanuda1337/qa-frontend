import clsx from 'clsx';import React, { useEffect, useMemo } from 'react';import Card from 'src/components/Card/Card';import classes from './Main.module.scss';import ListElement from 'src/features/main/ListElement/ListElement';import Knowledge from 'src/assets/images/knowledge.png';import Update from 'src/assets/images/update.png';import Combine from 'src/assets/images/combine.png';import { Button, Checkbox } from '@mui/material';import { useNavigate } from 'react-router-dom';import { useAppSelector, useBoundActions } from 'src/app/hooks';import { fetchCategoriesAsync } from 'src/features/categories/Categories.slice';import { trainerActions } from '../trainer/Trainer.slice';import {getCategoriesIdsFromStorage} from "src/features/trainer/Trainer.utils";import {STORAGE_CATEGORY_PREFERENCES} from "src/consts";const Main: React.FC = () => {  const categoriesIds = useAppSelector(    (state) => state.trainerReducer.categoriesIds  );  const categories = useAppSelector(    (state) => state.categoriesReducer.categories  );  const boundActions = useBoundActions({    fetchCategoriesAsync,    ...trainerActions,  });  const navigate = useNavigate();  const allCategoriesIds = useMemo(    () => categories.map((c) => c.id),    [categories]  );  useEffect(() => {    boundActions.fetchCategoriesAsync({ withQuestions: true });  }, []);  useEffect(() => {    if (!allCategoriesIds.length) return;    boundActions.setCategories(getCategoriesIdsFromStorage());  }, [allCategoriesIds]);  const filteredCategories = categories.filter((category) =>    categoriesIds.includes(category.id)  );  const { total, learned, mastered } = filteredCategories.reduce(    (acc, { questionsCount }) => ({      mastered: acc.mastered + (questionsCount?.mastered || 0),      total: acc.total + (questionsCount?.total || 0),      learned: acc.learned + (questionsCount?.learned || 0),    }),    { learned: 0, total: 0, mastered: 0 }  );  const handleChangeCategories = (id: number) => {    boundActions.selectCategory(id);  };  const rootCheckboxChecked = categoriesIds.length === allCategoriesIds.length;  const rootCheckboxIndeterminate =    categoriesIds.length > 0 && !rootCheckboxChecked;  const handleRootCheckbox = () => {    if (rootCheckboxChecked) {      boundActions.setCategories([]);      localStorage.setItem(STORAGE_CATEGORY_PREFERENCES, JSON.stringify([]))      return;    }    boundActions.setCategories(allCategoriesIds);    localStorage.setItem(STORAGE_CATEGORY_PREFERENCES, JSON.stringify(allCategoriesIds))  };  return (    <div className={classes.wrapper}>      <h1>Что будем учить сегодня?</h1>      <div className={classes.container}>        <div className={clsx(classes.block, classes.cards)}>          <Card            title="Учить новые"            progress={learned}            total={total}            color={'#4168e5'}            disabled={total === learned}            image={Knowledge}            onClick={() => navigate('/trainer/new')}          />          <Card            title="Повторение"            progress={mastered}            total={total}            disabled={total === mastered}            color={'#c55dd9'}            image={Update}            onClick={() => navigate('/trainer/repeat')}          />          <Card            title="Комбинированный"            color={'#65ce3f'}            image={Combine}            disabled={total === mastered && total === learned}            hideSubtext            onClick={() => navigate('/trainer/compo')}          />        </div>        <Button          className={classes['categories-title']}          onClick={(e) => {            e.preventDefault();            handleRootCheckbox();          }}        >          <Checkbox            checked={rootCheckboxChecked}            indeterminate={rootCheckboxIndeterminate}            onChange={handleRootCheckbox}          />          <h2>Темы вопросов</h2>        </Button>        <ul className={clsx(classes.block, classes.list)}>          {categories.map((category) => (            <ListElement              key={category.id}              id={category.id}              title={category.name}              learned={category.questionsCount?.learned || 0}              mastered={category.questionsCount?.mastered || 0}              total={category.questionsCount?.total || 0}              selected={categoriesIds.includes(category.id)}              onChange={() => handleChangeCategories(category.id)}            />          ))}        </ul>      </div>    </div>  );};export default Main;