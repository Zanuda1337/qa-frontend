import React, { useEffect, useState } from 'react';import QuestionForm from 'src/features/questions/QuestionForm';import { Navigate, useParams } from 'react-router-dom';import { TQuestion } from 'src/features/questions/Questions.types';import { questionsApi } from 'src/api/questionsApi/questionsApi';import {useAppSelector, useBoundActions} from 'src/app/hooks';import { editQuestionAsync } from 'src/features/questions/Questions.slice';import {useSnackbarListener} from "src/hooks";type TEditQuestionProps = {};const EditQuestion: React.FC<TEditQuestionProps> = ({}) => {  const { id } = useParams();  const boundActions = useBoundActions({ editQuestionAsync });  const updating = useAppSelector(state => state.questionsReducer.meta.updating);  const status = useAppSelector(state => state.questionsReducer.status);  const message = useAppSelector(state => state.questionsReducer.message);  const [question, setQuestion] = useState<TQuestion | null>(null);  const [fetching, setFetching] = useState(true);  const idIsValid = id && !isNaN(+id);  useEffect(() => {    if (!idIsValid) return;    questionsApi      .fetchOneQuestion(+id)      .then(({ data }) => {        setQuestion(data);        setFetching(false);      })      .catch(() => {        setFetching(false);      });  }, []);  const handleSubmit = (data: {    categoryId: string;    title: string;    answer: string;  }) => {    if (!idIsValid) return;    boundActions.editQuestionAsync({      ...data,      id: +id,      categoryId: +data.categoryId,    });  };  useSnackbarListener(message, status === 'failed' ? "error" : "info");  if (!idIsValid || (!fetching && !question))    return <Navigate replace to="/404" />;  return (    <div className={'form'}>      {question && (        <QuestionForm          fetching={updating}          onSubmit={handleSubmit}          values={{            title: question.title,            answer: question.answer,            categoryId: question.category.id.toString(),          }}        />      )}    </div>  );};export default EditQuestion;