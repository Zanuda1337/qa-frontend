import React, { useState } from 'react';import classes from './Settings.module.scss';import CustomButton from 'src/components/CustomButton/CustomButton';import CustomTextField from 'src/components/CustomTextField/CustomTextField';import clsx from 'clsx';import { Controller, useForm } from 'react-hook-form';import { useAppSelector, useBoundActions } from 'src/app/hooks';import { minLength, required } from 'src/utils/validators';import {  changePasswordAsync,  deleteAccountAsync,  resetProgressAsync,} from 'src/features/auth/Auth.slice';import { useSnackbarListener } from 'src/hooks';import CustomDialogue from 'src/components/CustomDialogue/CustomDialogue';import {useSnackbar} from "notistack";import {clamp} from "src/utils";type TFormValues = {  oldPassword: string;  password: string;};const allActions = {  changePasswordAsync,  deleteAccountAsync,  resetProgressAsync,};const Settings: React.FC = () => {  const status = useAppSelector((state) => state.authReducer.status);  const message = useAppSelector((state) => state.authReducer.message);  const meta = useAppSelector((state) => state.authReducer.meta);  const boundActions = useBoundActions(allActions);  const { control, handleSubmit, setError } = useForm<TFormValues>({    mode: 'onBlur',    defaultValues: { password: '', oldPassword: '' },  });  const [isResetModalOpen, setResetModalOpen] = useState(false);  const [deleteAccModalValue, setDeleteAccModalValue] = useState(0);  const [passError, setPassError] = useState('');  const [password, setPassword] = useState('');  const {enqueueSnackbar} = useSnackbar()  useSnackbarListener(message, status === 'failed' ? 'error' : 'info');  const onSubmit = (data: TFormValues) => {    boundActions      .changePasswordAsync(data)      .unwrap()      .catch((message) => {        if (message === 'Неверный пароль') {          setError('oldPassword', {});        }      });  };  const handleCloseDelete = () => {    setDeleteAccModalValue(0);    setPassword('');    setPassError('');  };  const handleResetProgress = () => {    boundActions      .resetProgressAsync()      .unwrap()      .then(() => setResetModalOpen(false));  };  const handleDeleteAcc = () => {    const newValue = deleteAccModalValue + 1;    if (newValue <= maxModals) setDeleteAccModalValue(newValue);    else {      // boundActions.deleteAccountAsync();      if (!password.length) {        setPassError(required);        return;      }      if (password.length < minLength.value) {        setPassError(minLength.message);        return;      }      setPassError('');      boundActions        .deleteAccountAsync(password)        .unwrap().then(() => enqueueSnackbar('Мы будем скучать', {variant:'info'}))        .catch((message) => setPassError(message));    }  };  const title = 'Вы уверены';  const subtext = ', что вы уверены';  const maxModals = 4;  return (    <div className={classes.wrapper}>      <div className={classes.block}>        <p className={classes.title}>Смена пароля</p>        <form className={classes.items}>          <div>            <Controller              name={'oldPassword'}              control={control}              rules={{ required, minLength }}              render={({                field: { value, onChange, onBlur },                fieldState: { error },              }) => (                <CustomTextField                  label="Старый пароль"                  type="password"                  value={value}                  onChange={onChange}                  onBlur={onBlur}                  error={!!error}                  message={error?.message}                />              )}            />          </div>          <div>            <Controller              name={'password'}              control={control}              rules={{ required, minLength }}              render={({                field: { value, onChange, onBlur },                fieldState: { error },              }) => (                <CustomTextField                  label="Новый пароль"                  type="password"                  value={value}                  onChange={onChange}                  onBlur={onBlur}                  error={!!error}                  message={error?.message}                />              )}            />          </div>          <div>            <CustomButton              variant="contained"              onClick={handleSubmit(onSubmit)}              fetching={meta.updating}            >              <p>Сменить пароль</p>            </CustomButton>          </div>        </form>      </div>      <div className={classes.block}>        <p className={classes.title}>Аккаунт</p>        <div className={clsx(classes.items, classes.column)}>          <div>            <CustomButton              variant="outlined"              onClick={() => setResetModalOpen(true)}              fetching={meta.reset}            >              <p>Сбросить весь прогресс</p>            </CustomButton>            <CustomDialogue              open={isResetModalOpen}              content={                'Это действие нельзя будет отменить. Ваш прогресс будет безвозвратно удален.'              }              title={'Вы уверены?'}              fetching={meta.reset}              onConfirm={handleResetProgress}              onClose={() => setResetModalOpen(false)}            />          </div>          <div>            <CustomButton              variant="contained"              className={classes.danger}              onClick={() => setDeleteAccModalValue(1)}            >              <p>Удалить аккаунт</p>            </CustomButton>            <CustomDialogue              open={!!deleteAccModalValue}              style={{                transform: `scale(${clamp((deleteAccModalValue - 1) * 0.1 + 1, 1, 3)})`,              }}              content={                <div className={classes.modalContent}>                  <p>                    Это действие нельзя будет отменить, ваш аккаунт будет удален                    безвозвратно.                  </p>                  {deleteAccModalValue >= maxModals && (                    <>                      <p>Подтвердите пароль, чтобы удалить аккаунт</p>                      <CustomTextField                        label="Пароль"                        type="password"                        value={password}                        onChange={(e) => setPassword(e.target.value)}                        error={!!passError}                        message={passError}                      />                    </>                  )}                </div>              }              title={                title.padEnd(                  title.length + subtext.length * (deleteAccModalValue - 1),                  subtext                ) + '?'              }              fetching={meta.deleting}              confirmTitle={                deleteAccModalValue < maxModals ? 'Подтвердить' : 'Удалить'              }              onConfirm={handleDeleteAcc}              onClose={handleCloseDelete}            />          </div>        </div>      </div>    </div>  );};export default Settings;